<Git>
버전관리시스템: 
- 파일의 변경 내용을 계속 추적하도록 개발 된 SW
- 분산 버전관리 시스템으로 개발 구성원 모두 현재 상태의 파일뿐만 아니라 그 프로젝트의 전체 이력을 가지고 있게 됨

<GitHub>
-인터넷 저장소
-Git 리포지토리를 업로드 할 수 있는 웹사이트
-리포지터리를 공유할 수 있는 중앙 저장소, 웹기반 인터페이스, forking, pull request, issues, wikis와 같은 기능을 제공하여 팀원들과 보다 효율적으로 변경안을 구체화하고  토론하며 검토할 수 있다.
-리포지터리:조직 내의 흩어져 있는 각종 정보나 응용시스템의 개발에 관련된 정보를 모아놓고 서로 공유할 수 있게 한 정보의 저장소

<Git을 사용하는 이유>
-변경취소: 실수를 했을 경우 구 버전의 작업파일을 복수하여 이전단계로 돌아 갈 수 있음
-모든 변경에 대한 완벽한 이력(history): 구 버전의 프로젝트를 확인해 그 당시 파일의 상태를 정확히 볼 수 있음
-변경한 이유 기록: 왜 변경했는지 기억할 수 없을때 Git의 commit message를 이용하여 변경한 이유를 추후에도 참조할 수 있음
-변경에 대한 확신: 잘 되지 않으면 언제든지 이전 버전으로 복귀하면 됨
-여러 갈래의 히스토리(history): 다른 기능을 독립적으로 실험해 보기 위해 별도의 branch를 생성할 수 있음. 성공하면 변경내용을 master branch로 병합하고 잘 독장하지 않으면 삭제할 수 있음.
-충돌 해결 능력: Git을 이용하며 여러 사람들이 동시에 같은 파일을 작업할 수 있음. 대개 자동으로 변경사항을 병합할 수 있음. 그렇지 못할 경우 충돌이 무엇이고 이를 해결하기 쉽게 해줌
- 독립된 히스토리: 여러 사람들이 다른 branch에서 작업 가능. 기능을 독립적으로 개발하고 완료되었을 때 그 기능을 병합 가능.
- 기록요구: issues를 사용해 버그를 기록하거나 개발하고 싶은 새로운 기능을 구체화 가능
- 독립된 히스토리에 대한 협력: Branch와 Pull request를 이용해 다른 branch 또는 기능에 협력할 수 있음
- 진행중인 작업 검토: Pull request 목록을 통해 현재 무슨 작업이 진행되고 있는지 모두 볼 수 있음. 특정 pull request를 클릭하여 최근의 변경 내용과 변경에 관한 모든 논의 내용을 볼 수 있음
- 팀의 작업 진척 상황 확인: Pulse를 훑어보거나 commit history를 살펴보면 팀의 진척상황을 알 수 있음.

<꿀팁>
책이 주지 못하는 해결책이 있을 때, github를 이용해 오픈소스를 살펴보자

<하는 법>
-1. 내 작업물이 있는 곳의  파일에서 마우스 우클릭 -> 더많은 속성 보기 -> Git Bash 선택하기
-1번이 안되면 2번을 실시
-2. cd /C/ 하고 내 파일 경로 적기

<main -> master 로 바꾸는 법>
git branch -M master

<깃 사용자 등록법>
워닝에 내 이름, 이메일 쓰기

<commit 하는법>
git push -f origin master
: 강제로 커밋하는 법

<SourseTree>
: 프로젝트 관리툴 (위에서 한 복잡한 것들을 쉽게 해주는 툴)

<Git 브랜치 전략>
여러 개발자가 하나의 저장소를 사용하는 환경에서 저장소를 효과적으로 활용하기 위한 work-flow
- git-flow: 어느정도 테스트가 끝났을때 사용하는게 좋다
- Github-flow :사용할때는 충분한 대화가 필요하고 조심히 사용해야한다, 바쁠때 유용하다
경험상 Github-flow 사용하다가 git-flow 사용하는걸 추천